/*
 * Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/NVIDIA/k8s-dra-driver/api/nvidia.com/resource/gpu/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MultiNodeEnvironmentLister helps list MultiNodeEnvironments.
// All objects returned here must be treated as read-only.
type MultiNodeEnvironmentLister interface {
	// List lists all MultiNodeEnvironments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiNodeEnvironment, err error)
	// MultiNodeEnvironments returns an object that can list and get MultiNodeEnvironments.
	MultiNodeEnvironments(namespace string) MultiNodeEnvironmentNamespaceLister
	MultiNodeEnvironmentListerExpansion
}

// multiNodeEnvironmentLister implements the MultiNodeEnvironmentLister interface.
type multiNodeEnvironmentLister struct {
	indexer cache.Indexer
}

// NewMultiNodeEnvironmentLister returns a new MultiNodeEnvironmentLister.
func NewMultiNodeEnvironmentLister(indexer cache.Indexer) MultiNodeEnvironmentLister {
	return &multiNodeEnvironmentLister{indexer: indexer}
}

// List lists all MultiNodeEnvironments in the indexer.
func (s *multiNodeEnvironmentLister) List(selector labels.Selector) (ret []*v1alpha1.MultiNodeEnvironment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiNodeEnvironment))
	})
	return ret, err
}

// MultiNodeEnvironments returns an object that can list and get MultiNodeEnvironments.
func (s *multiNodeEnvironmentLister) MultiNodeEnvironments(namespace string) MultiNodeEnvironmentNamespaceLister {
	return multiNodeEnvironmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MultiNodeEnvironmentNamespaceLister helps list and get MultiNodeEnvironments.
// All objects returned here must be treated as read-only.
type MultiNodeEnvironmentNamespaceLister interface {
	// List lists all MultiNodeEnvironments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MultiNodeEnvironment, err error)
	// Get retrieves the MultiNodeEnvironment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MultiNodeEnvironment, error)
	MultiNodeEnvironmentNamespaceListerExpansion
}

// multiNodeEnvironmentNamespaceLister implements the MultiNodeEnvironmentNamespaceLister
// interface.
type multiNodeEnvironmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MultiNodeEnvironments in the indexer for a given namespace.
func (s multiNodeEnvironmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MultiNodeEnvironment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MultiNodeEnvironment))
	})
	return ret, err
}

// Get retrieves the MultiNodeEnvironment from the indexer for a given namespace and name.
func (s multiNodeEnvironmentNamespaceLister) Get(name string) (*v1alpha1.MultiNodeEnvironment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("multinodeenvironment"), name)
	}
	return obj.(*v1alpha1.MultiNodeEnvironment), nil
}
