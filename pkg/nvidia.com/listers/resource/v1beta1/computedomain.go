/*
 * Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/NVIDIA/k8s-dra-driver/api/nvidia.com/resource/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ComputeDomainLister helps list ComputeDomains.
// All objects returned here must be treated as read-only.
type ComputeDomainLister interface {
	// List lists all ComputeDomains in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ComputeDomain, err error)
	// ComputeDomains returns an object that can list and get ComputeDomains.
	ComputeDomains(namespace string) ComputeDomainNamespaceLister
	ComputeDomainListerExpansion
}

// computeDomainLister implements the ComputeDomainLister interface.
type computeDomainLister struct {
	indexer cache.Indexer
}

// NewComputeDomainLister returns a new ComputeDomainLister.
func NewComputeDomainLister(indexer cache.Indexer) ComputeDomainLister {
	return &computeDomainLister{indexer: indexer}
}

// List lists all ComputeDomains in the indexer.
func (s *computeDomainLister) List(selector labels.Selector) (ret []*v1beta1.ComputeDomain, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ComputeDomain))
	})
	return ret, err
}

// ComputeDomains returns an object that can list and get ComputeDomains.
func (s *computeDomainLister) ComputeDomains(namespace string) ComputeDomainNamespaceLister {
	return computeDomainNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ComputeDomainNamespaceLister helps list and get ComputeDomains.
// All objects returned here must be treated as read-only.
type ComputeDomainNamespaceLister interface {
	// List lists all ComputeDomains in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.ComputeDomain, err error)
	// Get retrieves the ComputeDomain from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.ComputeDomain, error)
	ComputeDomainNamespaceListerExpansion
}

// computeDomainNamespaceLister implements the ComputeDomainNamespaceLister
// interface.
type computeDomainNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ComputeDomains in the indexer for a given namespace.
func (s computeDomainNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.ComputeDomain, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.ComputeDomain))
	})
	return ret, err
}

// Get retrieves the ComputeDomain from the indexer for a given namespace and name.
func (s computeDomainNamespaceLister) Get(name string) (*v1beta1.ComputeDomain, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("computedomain"), name)
	}
	return obj.(*v1beta1.ComputeDomain), nil
}
