/*
 * Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	nvidiav1 "github.com/NVIDIA/k8s-dra-driver/pkg/crd/nvidia/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeDeviceClasses implements DeviceClassInterface
type FakeDeviceClasses struct {
	Fake *FakeDraV1
}

var deviceclassesResource = schema.GroupVersionResource{Group: "dra.gpu.nvidia.com", Version: "v1", Resource: "deviceclasses"}

var deviceclassesKind = schema.GroupVersionKind{Group: "dra.gpu.nvidia.com", Version: "v1", Kind: "DeviceClass"}

// Get takes name of the deviceClass, and returns the corresponding deviceClass object, and an error if there is any.
func (c *FakeDeviceClasses) Get(ctx context.Context, name string, options v1.GetOptions) (result *nvidiav1.DeviceClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(deviceclassesResource, name), &nvidiav1.DeviceClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nvidiav1.DeviceClass), err
}

// List takes label and field selectors, and returns the list of DeviceClasses that match those selectors.
func (c *FakeDeviceClasses) List(ctx context.Context, opts v1.ListOptions) (result *nvidiav1.DeviceClassList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(deviceclassesResource, deviceclassesKind, opts), &nvidiav1.DeviceClassList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &nvidiav1.DeviceClassList{ListMeta: obj.(*nvidiav1.DeviceClassList).ListMeta}
	for _, item := range obj.(*nvidiav1.DeviceClassList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested deviceClasses.
func (c *FakeDeviceClasses) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(deviceclassesResource, opts))
}

// Create takes the representation of a deviceClass and creates it.  Returns the server's representation of the deviceClass, and an error, if there is any.
func (c *FakeDeviceClasses) Create(ctx context.Context, deviceClass *nvidiav1.DeviceClass, opts v1.CreateOptions) (result *nvidiav1.DeviceClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(deviceclassesResource, deviceClass), &nvidiav1.DeviceClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nvidiav1.DeviceClass), err
}

// Update takes the representation of a deviceClass and updates it. Returns the server's representation of the deviceClass, and an error, if there is any.
func (c *FakeDeviceClasses) Update(ctx context.Context, deviceClass *nvidiav1.DeviceClass, opts v1.UpdateOptions) (result *nvidiav1.DeviceClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(deviceclassesResource, deviceClass), &nvidiav1.DeviceClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nvidiav1.DeviceClass), err
}

// Delete takes name of the deviceClass and deletes it. Returns an error if one occurs.
func (c *FakeDeviceClasses) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(deviceclassesResource, name, opts), &nvidiav1.DeviceClass{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeDeviceClasses) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(deviceclassesResource, listOpts)

	_, err := c.Fake.Invokes(action, &nvidiav1.DeviceClassList{})
	return err
}

// Patch applies the patch and returns the patched deviceClass.
func (c *FakeDeviceClasses) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *nvidiav1.DeviceClass, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(deviceclassesResource, name, pt, data, subresources...), &nvidiav1.DeviceClass{})
	if obj == nil {
		return nil, err
	}
	return obj.(*nvidiav1.DeviceClass), err
}
